// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetHealthData, GetHealthResponses, ListProjectsData, ListProjectsResponses, ListProjectsErrors, CreateProjectData, CreateProjectResponses, CreateProjectErrors, ListTasksData, ListTasksResponses, ListTasksErrors, CreateTaskData, CreateTaskResponses, CreateTaskErrors, DeleteTaskData, DeleteTaskResponses, DeleteTaskErrors, GetTaskData, GetTaskResponses, GetTaskErrors, UpdateTaskData, UpdateTaskResponses, UpdateTaskErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Health Check
 */
export const getHealth = <ThrowOnError extends boolean = false>(options?: Options<GetHealthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHealthResponses, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * List projects.
 * Returns all projects.
 */
export const listProjects = <ThrowOnError extends boolean = false>(options?: Options<ListProjectsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListProjectsResponses, ListProjectsErrors, ThrowOnError>({
        url: '/projects',
        ...options
    });
};

/**
 * Create a new project.
 * Create a new project with a unique name.
 */
export const createProject = <ThrowOnError extends boolean = false>(options: Options<CreateProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProjectResponses, CreateProjectErrors, ThrowOnError>({
        url: '/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List tasks in a project.
 * Filter by status and/or title query; results sorted by updatedAt desc.
 */
export const listTasks = <ThrowOnError extends boolean = false>(options: Options<ListTasksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTasksResponses, ListTasksErrors, ThrowOnError>({
        url: '/projects/{projectId}/tasks',
        ...options
    });
};

/**
 * Create a task in a project.
 * Create a new task; status defaults to TODO if omitted.
 */
export const createTask = <ThrowOnError extends boolean = false>(options: Options<CreateTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTaskResponses, CreateTaskErrors, ThrowOnError>({
        url: '/projects/{projectId}/tasks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a task.
 * Delete a task by ID.
 */
export const deleteTask = <ThrowOnError extends boolean = false>(options: Options<DeleteTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTaskResponses, DeleteTaskErrors, ThrowOnError>({
        url: '/projects/{projectId}/tasks/{taskId}',
        ...options
    });
};

/**
 * Get a task by ID.
 * Return a single task.
 */
export const getTask = <ThrowOnError extends boolean = false>(options: Options<GetTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTaskResponses, GetTaskErrors, ThrowOnError>({
        url: '/projects/{projectId}/tasks/{taskId}',
        ...options
    });
};

/**
 * Update a task (partial).
 * Update one or more fields of a task.
 */
export const updateTask = <ThrowOnError extends boolean = false>(options: Options<UpdateTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTaskResponses, UpdateTaskErrors, ThrowOnError>({
        url: '/projects/{projectId}/tasks/{taskId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};