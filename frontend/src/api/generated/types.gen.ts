// This file is auto-generated by @hey-api/openapi-ts

export type Health = {
    status: Status;
};

export type Status = 'ok' | 'unhealthy';

export type _Error = {
    code: number;
    message: string;
};

export type Project = {
    id: string;
    name: string;
    createdAt: string;
    updatedAt: string;
};

export type NewProject = {
    name: string;
};

export type UpdateProject = {
    name?: string;
};

/**
 * Bad Request (malformed JSON or type mismatch)
 */
export type BadRequest = unknown;

/**
 * Resource not found
 */
export type NotFound = unknown;

/**
 * Conflict (e.g., unique constraint)
 */
export type Conflict = unknown;

/**
 * Validation failed (well-formed request, semantic rules fail)
 */
export type Unprocessable = unknown;

/**
 * Unexpected error
 */
export type DefaultError = unknown;

export type Task = {
    id: string;
    projectId: string;
    title: string;
    description?: string | null;
    status: TaskStatus;
    createdAt: string;
    updatedAt: string;
};

export type TaskStatus = 'TODO' | 'IN_PROGRESS' | 'DONE';

export type NewTask = {
    title: string;
    description?: string | null;
    status?: TaskStatus;
};

export type UpdateTask = {
    title?: string;
    description?: string | null;
    status?: TaskStatus;
};

export type GetHealthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type GetHealthResponses = {
    /**
     * Service is healthy
     */
    200: Health;
};

export type GetHealthResponse = GetHealthResponses[keyof GetHealthResponses];

export type ListProjectsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/projects';
};

export type ListProjectsErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type ListProjectsError = ListProjectsErrors[keyof ListProjectsErrors];

export type ListProjectsResponses = {
    /**
     * Successful operation
     */
    200: Array<Project>;
};

export type ListProjectsResponse = ListProjectsResponses[keyof ListProjectsResponses];

export type CreateProjectData = {
    /**
     * New project payload
     */
    body: NewProject;
    path?: never;
    query?: never;
    url: '/projects';
};

export type CreateProjectErrors = {
    /**
     * Bad request (malformed JSON or type mismatch)
     */
    400: _Error;
    /**
     * Project name already exists
     */
    409: _Error;
    /**
     * Validation failed (e.g., name too short/long)
     */
    422: _Error;
    /**
     * Unexpected error
     */
    default: _Error;
};

export type CreateProjectError = CreateProjectErrors[keyof CreateProjectErrors];

export type CreateProjectResponses = {
    /**
     * Project created
     */
    201: Project;
};

export type CreateProjectResponse = CreateProjectResponses[keyof CreateProjectResponses];

export type ListTasksData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        projectId: string;
    };
    query?: {
        /**
         * Filter by task status
         */
        status?: TaskStatus;
        /**
         * Case-insensitive title contains
         */
        q?: string;
        limit?: number;
        offset?: number;
    };
    url: '/projects/{projectId}/tasks';
};

export type ListTasksErrors = {
    /**
     * Project not found
     */
    404: _Error;
    /**
     * Unexpected error
     */
    default: _Error;
};

export type ListTasksError = ListTasksErrors[keyof ListTasksErrors];

export type ListTasksResponses = {
    /**
     * Successful operation
     */
    200: Array<Task>;
};

export type ListTasksResponse = ListTasksResponses[keyof ListTasksResponses];

export type CreateTaskData = {
    /**
     * New task payload
     */
    body: NewTask;
    path: {
        /**
         * Project ID
         */
        projectId: string;
    };
    query?: never;
    url: '/projects/{projectId}/tasks';
};

export type CreateTaskErrors = {
    /**
     * Bad request (malformed JSON or type mismatch)
     */
    400: _Error;
    /**
     * Project not found
     */
    404: _Error;
    /**
     * Validation failed (e.g., empty title, invalid status)
     */
    422: _Error;
    /**
     * Unexpected error
     */
    default: _Error;
};

export type CreateTaskError = CreateTaskErrors[keyof CreateTaskErrors];

export type CreateTaskResponses = {
    /**
     * Task created
     */
    201: Task;
};

export type CreateTaskResponse = CreateTaskResponses[keyof CreateTaskResponses];

export type DeleteTaskData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        projectId: string;
        /**
         * Task ID
         */
        taskId: string;
    };
    query?: never;
    url: '/projects/{projectId}/tasks/{taskId}';
};

export type DeleteTaskErrors = {
    /**
     * Task or project not found
     */
    404: _Error;
    /**
     * Unexpected error
     */
    default: _Error;
};

export type DeleteTaskError = DeleteTaskErrors[keyof DeleteTaskErrors];

export type DeleteTaskResponses = {
    /**
     * Task deleted
     */
    204: void;
};

export type DeleteTaskResponse = DeleteTaskResponses[keyof DeleteTaskResponses];

export type GetTaskData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        projectId: string;
        /**
         * Task ID
         */
        taskId: string;
    };
    query?: never;
    url: '/projects/{projectId}/tasks/{taskId}';
};

export type GetTaskErrors = {
    /**
     * Task or project not found
     */
    404: _Error;
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetTaskError = GetTaskErrors[keyof GetTaskErrors];

export type GetTaskResponses = {
    /**
     * Successful operation
     */
    200: Task;
};

export type GetTaskResponse = GetTaskResponses[keyof GetTaskResponses];

export type UpdateTaskData = {
    body: UpdateTask;
    path: {
        /**
         * Project ID
         */
        projectId: string;
        /**
         * Task ID
         */
        taskId: string;
    };
    query?: never;
    url: '/projects/{projectId}/tasks/{taskId}';
};

export type UpdateTaskErrors = {
    /**
     * Task or project not found
     */
    404: _Error;
    /**
     * Validation failed (e.g., invalid status value)
     */
    422: _Error;
    /**
     * Unexpected error
     */
    default: _Error;
};

export type UpdateTaskError = UpdateTaskErrors[keyof UpdateTaskErrors];

export type UpdateTaskResponses = {
    /**
     * Successful operation
     */
    200: Task;
};

export type UpdateTaskResponse = UpdateTaskResponses[keyof UpdateTaskResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};