// Package scheme provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package scheme

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for Status.
const (
	Ok        Status = "ok"
	Unhealthy Status = "unhealthy"
)

// Defines values for TaskStatus.
const (
	DONE       TaskStatus = "DONE"
	INPROGRESS TaskStatus = "IN_PROGRESS"
	TODO       TaskStatus = "TODO"
)

// BadRequest Bad Request (malformed JSON or type mismatch)
type BadRequest = interface{}

// Conflict Conflict (e.g., unique constraint)
type Conflict = interface{}

// DefaultError Unexpected error
type DefaultError = interface{}

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// Health defines model for Health.
type Health struct {
	Status Status `json:"status"`
}

// NewProject defines model for NewProject.
type NewProject struct {
	Name string `json:"name"`
}

// NewTask defines model for NewTask.
type NewTask struct {
	Description *string     `json:"description"`
	Status      *TaskStatus `json:"status,omitempty"`
	Title       string      `json:"title"`
}

// NotFound Resource not found
type NotFound = interface{}

// Project defines model for Project.
type Project struct {
	CreatedAt time.Time          `json:"createdAt"`
	Id        openapi_types.UUID `json:"id"`
	Name      string             `json:"name"`
	UpdatedAt time.Time          `json:"updatedAt"`
}

// Status defines model for Status.
type Status string

// Task defines model for Task.
type Task struct {
	CreatedAt   time.Time          `json:"createdAt"`
	Description *string            `json:"description"`
	Id          openapi_types.UUID `json:"id"`
	ProjectId   openapi_types.UUID `json:"projectId"`
	Status      TaskStatus         `json:"status"`
	Title       string             `json:"title"`
	UpdatedAt   time.Time          `json:"updatedAt"`
}

// TaskStatus defines model for TaskStatus.
type TaskStatus string

// Unprocessable Validation failed (well-formed request, semantic rules fail)
type Unprocessable = interface{}

// UpdateProject defines model for UpdateProject.
type UpdateProject struct {
	Name *string `json:"name,omitempty"`
}

// UpdateTask defines model for UpdateTask.
type UpdateTask struct {
	Description *string     `json:"description"`
	Status      *TaskStatus `json:"status,omitempty"`
	Title       *string     `json:"title,omitempty"`
}

// ListTasksParams defines parameters for ListTasks.
type ListTasksParams struct {
	// Status Filter by task status
	Status *TaskStatus `form:"status,omitempty" json:"status,omitempty"`

	// Q Case-insensitive title contains
	Q      *string `form:"q,omitempty" json:"q,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
}

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody = NewProject

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody = NewTask

// UpdateTaskJSONRequestBody defines body for UpdateTask for application/json ContentType.
type UpdateTaskJSONRequestBody = UpdateTask
