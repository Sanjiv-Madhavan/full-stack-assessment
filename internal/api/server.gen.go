//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "full-stack-assesment/internal/scheme"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health Check
	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// List projects.
	// (GET /projects)
	ListProjects(w http.ResponseWriter, r *http.Request)
	// Create a new project.
	// (POST /projects)
	CreateProject(w http.ResponseWriter, r *http.Request)
	// List tasks in a project.
	// (GET /projects/{projectId}/tasks)
	ListTasks(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID, params ListTasksParams)
	// Create a task in a project.
	// (POST /projects/{projectId}/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID)
	// Delete a task.
	// (DELETE /projects/{projectId}/tasks/{taskId})
	DeleteTask(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID, taskId openapi_types.UUID)
	// Get a task by ID.
	// (GET /projects/{projectId}/tasks/{taskId})
	GetTask(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID, taskId openapi_types.UUID)
	// Update a task (partial).
	// (PUT /projects/{projectId}/tasks/{taskId})
	UpdateTask(w http.ResponseWriter, r *http.Request, projectId openapi_types.UUID, taskId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProjects operation middleware
func (siw *ServerInterfaceWrapper) ListProjects(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjects(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProject operation middleware
func (siw *ServerInterfaceWrapper) CreateProject(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProject(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTasks operation middleware
func (siw *ServerInterfaceWrapper) ListTasks(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTasksParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTasks(w, r, projectId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTask operation middleware
func (siw *ServerInterfaceWrapper) DeleteTask(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	// ------------- Path parameter "taskId" -------------
	var taskId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", r.PathValue("taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTask(w, r, projectId, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTask operation middleware
func (siw *ServerInterfaceWrapper) GetTask(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	// ------------- Path parameter "taskId" -------------
	var taskId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", r.PathValue("taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTask(w, r, projectId, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateTask operation middleware
func (siw *ServerInterfaceWrapper) UpdateTask(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", r.PathValue("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	// ------------- Path parameter "taskId" -------------
	var taskId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", r.PathValue("taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTask(w, r, projectId, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/health", wrapper.GetHealth)
	m.HandleFunc("GET "+options.BaseURL+"/projects", wrapper.ListProjects)
	m.HandleFunc("POST "+options.BaseURL+"/projects", wrapper.CreateProject)
	m.HandleFunc("GET "+options.BaseURL+"/projects/{projectId}/tasks", wrapper.ListTasks)
	m.HandleFunc("POST "+options.BaseURL+"/projects/{projectId}/tasks", wrapper.CreateTask)
	m.HandleFunc("DELETE "+options.BaseURL+"/projects/{projectId}/tasks/{taskId}", wrapper.DeleteTask)
	m.HandleFunc("GET "+options.BaseURL+"/projects/{projectId}/tasks/{taskId}", wrapper.GetTask)
	m.HandleFunc("PUT "+options.BaseURL+"/projects/{projectId}/tasks/{taskId}", wrapper.UpdateTask)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
