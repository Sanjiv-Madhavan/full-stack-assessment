openapi: 3.0.0
info:
  title: Todo Application API
  version: 1.1.0
  description: Basic todo application

paths:
  /health:
    get:
      summary: Health Check
      operationId: getHealth
      tags: [Health]
      responses:
        200:
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Health"

  /projects:
    get:
      tags: [projects]
      summary: List projects.
      description: Returns all projects.
      operationId: listProjects
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Project' }
        default:
          description: Unexpected error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    post:
      tags: [projects]
      summary: Create a new project.
      description: Create a new project with a unique name.
      operationId: createProject
      requestBody:
        description: New project payload
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/NewProject' }
      responses:
        '201':
          description: Project created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Project' }
        '400':
          description: Bad request (malformed JSON or type mismatch)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '409':
          description: Project name already exists
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '422':
          description: Validation failed (e.g., name too short/long)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        default:
          description: Unexpected error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
  
components:
  schemas:
    Health:
      type: object
      required: [status]
      properties:
        status:
          $ref: "#/components/schemas/Status"

    Status:
      type: string
      enum: [ok, unhealthy]

    Error:
      type: object
      required: [code, message]
      properties:
        code: { type: integer, example: 404 }
        message: { type: string, example: "todo not found" }

    Project:
      type: object
      required: [id, name, createdAt, updatedAt]
      properties:
        id: { type: string, format: uuid }
        name: { type: string, minLength: 1, maxLength: 200 }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    NewProject:
      type: object
      required: [name]
      properties:
        name: { type: string, minLength: 1, maxLength: 200 }

    UpdateProject:
      type: object
      properties:
        name: { type: string, minLength: 1, maxLength: 200 }

    TaskStatus:
      type: string
      enum: [TODO, IN_PROGRESS, DONE]

    BadRequest:
      description: Bad Request (malformed JSON or type mismatch)
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Conflict:
      description: Conflict (e.g., unique constraint)
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Unprocessable:
      description: Validation failed (well-formed request, semantic rules fail)
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    DefaultError:
      description: Unexpected error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }